[
  {
    "id": "fleet",
    "name": "Fleet",
    "fields": [
      "id",
      "uuid",
      "organization",
      "actor",
      "app_name",
      "slug",
      "should_be_running__release",
      "application_type",
      "is_for__device_type",
      "should_track_latest_release",
      "is_accessible_by_support_until__date",
      "is_public",
      "is_host",
      "is_archived",
      "is_discoverable",
      "is_stored_at__repository_url",
      "created_at"
    ],
    "examples": [
      {
        "id": "get-all-apps-of-org-by-handle",
        "summary": "Get all fleets of an organization by its HANDLE",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application",
        "filters": "?\\$filter=organization/any(o:o/handle%20eq%20%27<ORG_HANDLE>%27)"
      },
      {
        "id": "get-all-apps",
        "summary": "Get all fleets",
        "description": "Note: This will also include all public fleets of the platform. In most cases retrieving the fleets by their organization will be preferable.",
        "method": "GET",
        "endpoint": "/v7/application",
        "filters": ""
      },
      {
        "id": "get-my-apps",
        "summary": "Get all fleets associated with authenticated user",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application",
        "filters": "?\\$filter=is_directly_accessible_by__user/any(dau:true)"
      },
      {
        "id": "app-by-id",
        "summary": "Get fleet by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application(<ID>)",
        "filters": ""
      },
      {
        "id": "app-by-slug",
        "summary": "Get fleet by SLUG",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application(slug='<SLUG>')",
        "filters": ""
      },
      {
        "id": "app-by-name",
        "summary": "Get fleet by name",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application",
        "filters": "?\\$filter=app_name%20eq%20'<NAME>'"
      },
      {
        "id": "app-slug-with-devices",
        "summary": "Get fleet by SLUG along with its devices",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application(slug='<SLUG>')",
        "filters": "?\\$expand=owns__device"
      },
      {
        "id": "app-with-devices",
        "summary": "Get fleet by id along with its devices",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application(<ID>)",
        "filters": "?\\$expand=owns__device"
      },
      {
        "id": "app-filter-public",
        "summary": "Filter public fleets from result",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application",
        "filters": "?\\$filter=is_public%20eq%20false"
      },
      {
        "id": "create-app",
        "summary": "Create fleet",
        "description": "To retrieve the numeric ORGANIZATION_ID & DEVICE_TYPE_ID, check the respective documentation page for the organization & device type resources.",
        "method": "POST",
        "endpoint": "/v7/application",
        "filters": "",
        "data": "{\n    \"app_name\": \"<NAME>\",\n    \"organization\": <ORGANIZATION_ID>,\n    \"is_for__device_type\": <DEVICE_TYPE_ID>\n}"
      },
      {
        "id": "delete-app",
        "summary": "Delete fleet",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/application(<ID>)",
        "filters": ""
      },
      {
        "id": "get-fleet-target-release-by-slug",
        "summary": "Get the target release of a fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application(slug='<SLUG>')",
        "filters": "?\\$select=should_be_running__release"
      },
      {
        "id": "set-target-release-by-id",
        "summary": "Pin entire fleet to a specific release by ID",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application(<ID>)",
        "filters": "",
        "data": "{\n    \"should_be_running__release\": \"<RELEASE ID>\"\n    \"should_track_latest_release\": false\n}"
      },
      {
        "id": "set-target-release-by-slug",
        "summary": "Pin entire fleet to a specific release by SLUG",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application(slug='<SLUG>')",
        "filters": "",
        "data": "{\n    \"should_be_running__release\": \"<RELEASE ID>\"\n    \"should_track_latest_release\": false\n}"
      },
      {
        "id": "disable-auto-update",
        "summary": "Disable automatic update tracking for a fleet",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application(<ID>)",
        "filters": "",
        "data": "{\n    \"should_track_latest_release\": \"false\"\n}"
      },
      {
        "id": "enable-auto-update",
        "summary": "Enable automatic update tracking for a fleet",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application(<ID>)",
        "filters": "",
        "data": "{\n    \"should_track_latest_release\": \"true\"\n}"
      }
    ]
  },
  {
    "id": "fleet_membership_role",
    "name": "Fleet membership role",
    "fields": [
      "id",
      "name"
    ],
    "examples": [
      {
        "id": "get-fleet-membership_role",
        "summary": "Get all fleet membership roles",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application_membership_role",
        "filters": ""
      }
    ]
  },
  {
    "id": "fleet_tag",
    "name": "Fleet tag",
    "fields": [
      "id",
      "application",
      "tag_key",
      "value"
    ],
    "examples": [
      {
        "id": "get-fleet-tags",
        "summary": "Get all tags by fleet name",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application_tag",
        "filters": "?\\$filter=application/app_name%20eq%20'<NAME>'"
      },
      {
        "id": "create-fleet-tag",
        "summary": "Create a new fleet tag",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/application_tag",
        "filters": "",
        "data": "{\n    \"application\": \"<FLEET ID>\",\n    \"tag_key\": \"<KEY>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-fleet-tag",
        "summary": "Update a fleet tag",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application_tag/(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-fleet-tag",
        "summary": "Delete a fleet tag",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/application_tag/(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "api_key",
    "name": "API key",
    "fields": [
      "id",
      "created_at",
      "is_of__actor",
      "name",
      "description"
    ],
    "examples": [
      {
        "id": "get-api-keys",
        "summary": "Get all API keys",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/api_key",
        "filters": ""
      },
      {
        "id": "get-api-keys-by-device-uuid",
        "summary": "Get all API keys of a device by UUID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/api_key",
        "filters": "?\\$filter=is_of__actor/any(a:a/is_of__device/any(d:d/uuid%20eq%20'<DEVICE_UUID>'))"
      },
      {
        "id": "get-api-keys-by-application-slug",
        "summary": "Get all API keys of an application by slug",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/api_key",
        "filters": "?\\$filter=is_of__actor/any(a:a/is_of__application/any(ioa:ioa/slug%20eq%20'<SLUG>'))"
      },
      {
        "id": "get-api-keys-by-user",
        "summary": "Get all user API keys for the authenticated user",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/api_key",
        "filters": "?\\$filter=is_of__actor/any(a:a/is_of__user%20eq%20<USER_ID>))"
      },
      {
        "id": "set-api-key-expiry-date",
        "summary": "Update the expiry date for an API Key",
        "description": "Note: Select a date in the past to expire an API Key immediately.",
        "method": "PATCH",
        "endpoint": "/v7/api_key(<ID>)",
        "filters": "",
        "data": "{\n    \"expiry_date\": \"<ISO_8601_DATE_TIME>\"\n}"
      },
      {
        "id": "clear-api-key-expiry-date",
        "summary": "Clear the expiry date of an API Key",
        "method": "PATCH",
        "endpoint": "/v7/api_key(<ID>)",
        "filters": "",
        "data": "{\n    \"expiry_date\": null\n}"
      },
      {
        "id": "create-api-key",
        "summary": "Create new API key",
        "description": "",
        "method": "POST",
        "endpoint": "/api-key/user/full",
        "filters": "",
        "data": "{\n    \"name\": \"<NAME>\",\n    \"description\": \"<DESCRIPTION>\"\n}"
      }
    ]
  },
  {
    "id": "device",
    "name": "Device",
    "fields": [
      "id",
      "belongs_to__application",
      "belongs_to__user",
      "actor",
      "device_name",
      "is_of__device_type",
      "uuid",
      "is_running__release",
      "is_pinned_on__release",
      "should_be_running__release",
      "note",
      "local_id",
      "status",
      "overall_status",
      "is_online",
      "last_connectivity_event",
      "is_connected_to_vpn",
      "last_vpn_event",
      "ip_address",
      "mac_address",
      "public_address",
      "os_version",
      "os_variant",
      "supervisor_version",
      "should_be_managed_by__release",
      "is_managed_by__service_instance",
      "provisioning_progress",
      "provisioning_state",
      "download_progress",
      "is_web_accessible",
      "longitude",
      "latitude",
      "location",
      "custom_longitude",
      "custom_latitude",
      "is_locked_until__date",
      "is_accessible_by_support_until__date",
      "created_at",
      "is_active",
      "api_heartbeat_state",
      "memory_usage",
      "memory_total",
      "storage_block_device",
      "storage_usage",
      "storage_total",
      "cpu_temp",
      "cpu_usage",
      "cpu_id",
      "is_undervolted"
    ],
    "examples": [
      {
        "id": "get-devices",
        "summary": "Get all devices",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device",
        "filters": ""
      },
      {
        "id": "devices-by-fleet",
        "summary": "Get all devices by fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device",
        "filters": "?\\$filter=belongs_to__application%20eq%20'<FLEET ID>'"
      },
      {
        "id": "device-by-id",
        "summary": "Get device by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device(<ID>)",
        "filters": ""
      },
      {
        "id": "device-by-uuid",
        "summary": "Get device by UUID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device(uuid='<UUID>')",
        "filters": ""
      },
      {
        "id": "devices-by-uuid",
        "summary": "Get multiple devices by UUID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device",
        "filters": "?\\$filter=uuid%20in%20(%27<UUID1>%27,%27<UUID2>%27,%27<UUID3>%27)"
      },
      {
        "id": "device-overall-status",
        "summary": "Get the device overall_status field",
        "description": "The overall_status field is returned only when explicitly requested with $select.",
        "method": "GET",
        "endpoint": "/v7/device(<ID>)",
        "filters": "?\\$select=overall_status"
      },
      {
        "id": "get-current-release",
        "summary": "Get the release currently running on a device",
        "method": "GET",
        "endpoint": "/v7/device(<ID>)",
        "filters": "?\\$select=is_running__release",
        "data": ""
      },
      {
        "id": "get-pinned-release",
        "summary": "Get the release a device is pinned to",
        "description": "Note: is_pinned_on__release will be null/not set if the device isn't pinned to any release, in which case the device will be tracking the release of the application it belongs to.",
        "method": "GET",
        "endpoint": "/v7/device(<ID>)",
        "filters": "?\\$select=is_pinned_on__release",
        "data": ""
      },
      {
        "id": "set-device-to-release-by-id",
        "summary": "Pin device to a specific release by ID",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device(<ID>)",
        "filters": "",
        "data": "{\n    \"is_pinned_on__release\": <RELEASE ID>\n}"
      },
      {
        "id": "set-device-to-release-by-uuid",
        "summary": "Pin device to a specific release by UUID",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device(uuid='<UUID>')",
        "filters": "",
        "data": "{\n    \"is_pinned_on__release\": <RELEASE ID>\n}"
      },
      {
        "id": "get-target-release",
        "summary": "Get the target release of a device",
        "description": "This will be the release that the device is pinned to, or the target release of the fleet for non-pinned devices.",
        "method": "GET",
        "endpoint": "/v7/device(uuid='<UUID>')",
        "filters": "?\\$select=should_be_running__release",
        "data": ""
      },
      {
        "id": "update-device-supervisor-by-uuid",
        "summary": "Mark a device to be updated to a specific supervisor release",
        "description": "To request a list of available supervisor versions, check the respective documentation page for the supervisor release resource.",
        "method": "PATCH",
        "endpoint": "/v7/device(uuid='<UUID>')",
        "filters": "",
        "data": "{\n    \"should_be_managed_by__release\": <SUPERVISOR RELEASE ID>\n}"
      },
      {
        "id": "rename-device",
        "summary": "Rename device",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device(<ID>)",
        "filters": "",
        "data": "{\n    \"device_name\": \"<NEW NAME>\"\n}"
      },
      {
        "id": "delete-device",
        "summary": "Delete device",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/device(<ID>)",
        "filters": ""
      },
      {
        "id": "add-note",
        "summary": "Add note to a device",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device(<ID>)",
        "filters": "",
        "data": "{\n    \"note\": \"<NEW NOTE>\"\n}"
      },
      {
        "id": "move-device",
        "summary": "Move device to another fleet",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device(<ID>)",
        "filters": "",
        "data": "{\n    \"belongs_to__application\": \"<FLEET ID>\"\n}"
      },
      {
        "id": "deactivate-device",
        "summary": "Deactivate an offline device (CHARGEABLE)",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device(<ID>)",
        "filters": "",
        "data": "{\n    \"is_active\": false\n}"
      }
    ]
  },
  {
    "id": "device_type",
    "name": "Device type",
    "fields": [
      "id",
      "slug",
      "name",
      "is_private",
      "is_of__cpu_architecture",
      "belongs_to__device_family"
    ],
    "examples": [
      {
        "id": "device-type-by-id",
        "summary": "Get a device type by its ID",
        "description": "When querying a private device type it's necessary to include your bearer token. For public device types the auth header is optional.",
        "method": "GET",
        "endpoint": "/v7/device_type(<ID>)",
        "filters": ""
      },
      {
        "id": "device-type-by-handle",
        "summary": "Get a device type by its SLUG",
        "description": "When querying a private device type it's necessary to include your bearer token. For public device types the auth header is optional.",
        "method": "GET",
        "endpoint": "/v7/device_type(slug='<DEVICE TYPE SLUG>')",
        "filters": ""
      },
      {
        "id": "device-type-by-name",
        "summary": "Get a device type by its NAME",
        "description": "When querying a private device type it's necessary to include your bearer token. For public device types the auth header is optional.",
        "method": "GET",
        "endpoint": "/v7/device_type",
        "filters": "?\\$filter=name%20eq%20'<DEVICE TYPE NAME>'"
      },
      {
        "id": "get-supported-device-types",
        "summary": "Get all supported device types",
        "description": "When querying a private device type it's necessary to include your bearer token. For public device types the auth header is optional.",
        "method": "GET",
        "endpoint": "/v7/device_type",
        "filters": "?\\$filter=is_default_for__application/any(idfa:(idfa/is_host%20eq%20true)%20and%20(idfa/is_archived%20eq%20false)%20and%20(idfa/owns__release/any(r:(r/status%20eq%20'success')%20and%20(r/is_final%20eq%20true)%20and%20(r/is_invalidated%20eq%20false))))&\\$orderby=name%20asc"
      }
    ]
  },
  {
    "id": "device_config_variable",
    "name": "Device config variable",
    "fields": [
      "id",
      "device",
      "value",
      "name"
    ],
    "examples": [
      {
        "id": "get-device-config-vars",
        "summary": "Get all device config variables for a device",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_config_variable",
        "filters": "?\\$filter=device%20eq%20<DEVICE ID>"
      },
      {
        "id": "create-device-config-var",
        "summary": "Create a device config variable",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/device_config_variable",
        "filters": "",
        "data": "{\n    \"device\": \"<DEVICE ID>\",\n    \"name\": \"<NAME>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-device-config-var",
        "summary": "Update a device config variable",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device_config_variable(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-device-config-var",
        "summary": "Remove a device config variable",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/device_config_variable(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "device_environment_variable",
    "name": "Device Environment Variable",
    "fields": [
      "id",
      "created_at",
      "device",
      "name",
      "value"
    ],
    "examples": [
      {
        "id": "get-device-env-vars-by-device-uuid",
        "summary": "Get all device environment variables for a device by UUID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_environment_variable",
        "filters": "?\\$filter=device/any(d:d/uuid%20eq%20'<DEVICE_UUID>')"
      },
      {
        "id": "get-device-env-vars",
        "summary": "Get all device environment variables for a device by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_environment_variable",
        "filters": "?\\$filter=device%20eq%20<DEVICE ID>"
      },
      {
        "id": "create-device-env-var",
        "summary": "Create a device environment variable",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/device_environment_variable",
        "filters": "",
        "data": "{\n    \"device\": \"<DEVICE ID>\",\n    \"name\": \"<NAME>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-device-env-var",
        "summary": "Update a device environment variable",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device_environment_variable(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-device-env-var",
        "summary": "Remove a device environment variable",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/device_environment_variable(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "device_service_environment_variable",
    "name": "Device service variable",
    "fields": [
      "id",
      "created_at",
      "service_install",
      "value",
      "name"
    ],
    "examples": [
      {
        "id": "get-device-service-vars-by-device-uuid",
        "summary": "Get all service variables for a device by UUID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_service_environment_variable",
        "filters": "?\\$filter=service_install/any(si:si/device/any(d:d/uuid%20eq%20'<DEVICE_UUID>'))"
      },
      {
        "id": "get-device-service-vars-with-service-name",
        "summary": "Get all service variables for a device by UUID, including the service name",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_service_environment_variable",
        "filters": "?\\$filter=service_install/any(si:si/device/any(d:d/uuid%20eq%20'<DEVICE_UUID>'))&\\$expand=service_install(\\$expand=installs__service(\\$select=id,service_name))"
      },
      {
        "id": "get-device-service-vars",
        "summary": "Get all service variables for a device by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_service_environment_variable",
        "filters": "?\\$filter=service_install/device%20eq%20<DEVICE ID>"
      },
      {
        "id": "create-device-service-var",
        "summary": "Create a device service variable",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/device_service_environment_variable",
        "filters": "",
        "data": "{\n    \"service_install\": \"<SERVICE INSTALL ID>\",\n    \"name\": \"<NAME>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-device-service-var",
        "summary": "Update a device service variable",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device_service_environment_variable(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-device-service-var",
        "summary": "Remove a device service variable",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/device_service_environment_variable(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "device_tag",
    "name": "Device tag",
    "fields": [
      "id",
      "device",
      "tag_key",
      "value"
    ],
    "examples": [
      {
        "id": "get-tags",
        "summary": "Get all tags by device UUID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/device_tag",
        "filters": "?\\$filter=device/uuid%20eq%20'<UUID>'"
      },
      {
        "id": "create-tag",
        "summary": "Create a new device tag",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/device_tag",
        "filters": "",
        "data": "{\n    \"device\": \"<DEVICE ID>\",\n    \"tag_key\": \"<KEY>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-tag",
        "summary": "Update a device tag",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/device_tag(device=<DEVICE_ID>,tag_key='<EXISTING-KEY>')",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW-VALUE>\"\n}"
      },
      {
        "id": "delete-tag",
        "summary": "Delete a device tag given its database ID",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/device_tag(<TAG-ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "fleet_config_variable",
    "name": "Fleet config variable",
    "fields": [
      "id",
      "application",
      "name",
      "value"
    ],
    "examples": [
      {
        "id": "get-fleet-config-vars",
        "summary": "Get all fleet config variables for a fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application_config_variable",
        "filters": "?\\$filter=application%20eq%20<FLEET ID>"
      },
      {
        "id": "create-fleet-config-var",
        "summary": "Create a fleet config variable",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/application_config_variable",
        "filters": "",
        "data": "{\n    \"application\": \"<FLEET ID>\",\n    \"name\": \"<NAME>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-fleet-config-var",
        "summary": "Update a fleet environment variable",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application_config_variable(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-fleet-config-var",
        "summary": "Remove a fleet config variable",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/application_config_variable(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "fleet_environment_variable",
    "name": "Fleet environment variable",
    "fields": [
      "id",
      "created_at",
      "application",
      "name",
      "value"
    ],
    "examples": [
      {
        "id": "get-fleet-env-vars",
        "summary": "Get all fleet environment variables for a fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/application_environment_variable",
        "filters": "?\\$filter=application%20eq%20<FLEET ID>"
      },
      {
        "id": "create-fleet-env-var",
        "summary": "Create a fleet environment variable",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/application_environment_variable",
        "filters": "",
        "data": "{\n    \"application\": \"<FLEET ID>\",\n    \"name\": \"<NAME>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-fleet-env-var",
        "summary": "Update a fleet environment variable",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/application_environment_variable(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-fleet-env-var",
        "summary": "Remove a fleet environment variable",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/application_environment_variable(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "service_environment_variable",
    "name": "Fleet service variable",
    "fields": [
      "id",
      "created_at",
      "service_install",
      "value",
      "name"
    ],
    "examples": [
      {
        "id": "get-fleet-service-vars",
        "summary": "Get all fleet service variables for a service",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/service_environment_variable",
        "filters": "?\\$filter=service%20eq%20<SERVICE ID>"
      },
      {
        "id": "create-fleet-service-var",
        "summary": "Create a fleet service variable",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/service_environment_variable",
        "filters": "",
        "data": "{\n    \"service\": \"<SERVICE ID>\",\n    \"name\": \"<NAME>\",\n    \"value\": \"<VALUE>\"\n}"
      },
      {
        "id": "update-fleet-service-var",
        "summary": "Update a device service variable",
        "description": "",
        "method": "PATCH",
        "endpoint": "/v7/service_environment_variable(<ID>)",
        "filters": "",
        "data": "{\n    \"value\": \"<NEW VALUE>\"\n}"
      },
      {
        "id": "delete-fleet-service-var",
        "summary": "Remove a fleet service variable",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/service_environment_variable(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "organization",
    "name": "Organization",
    "fields": [
      "id",
      "created_at",
      "name",
      "handle",
      "company_name",
      "website",
      "industry",
      "billing_account_code"
    ],
    "examples": [
      {
        "id": "get-all-orgs",
        "summary": "Get all organizations associated with authenticated user",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/organization",
        "filters": ""
      },
      {
        "id": "org-by-id",
        "summary": "Get organization by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/organization(<ID>)",
        "filters": ""
      },
      {
        "id": "org-by-handle",
        "summary": "Get organization by handle",
        "description": "Uniquely identifies an organization. Handles are currently automatically generated and read-only.",
        "method": "GET",
        "endpoint": "/v7/organization(handle='<HANDLE>')",
        "filters": ""
      }
    ]
  },
  {
    "id": "organization_membership",
    "name": "Organization Membership",
    "fields": [
      "id",
      "created_at",
      "user",
      "is_member_of__organization",
      "organization_membership_role",
      "effective_seat_role"
    ],
    "examples": [
      {
        "id": "get-organization-memberships",
        "summary": "Get all organization memberships",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/organization_membership",
        "filters": ""
      }
    ]
  },
  {
    "id": "release",
    "name": "Release",
    "fields": [
      "id",
      "created_at",
      "belongs_to__application",
      "is_created_by__user",
      "raw_version",
      "semver",
      "semver_major",
      "semver_minor",
      "semver_patch",
      "semver_prerelease",
      "semver_build",
      "revision",
      "variant",
      "commit",
      "composition",
      "status",
      "source",
      "build_log",
      "start_timestamp",
      "end_timestamp",
      "update_timestamp",
      "is_invalidated",
      "release_version",
      "contract"
    ],
    "examples": [
      {
        "id": "releases-in-fleet",
        "summary": "Get all releases for a fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$filter=belongs_to__application%20eq%20<FLEET ID>"
      },
      {
        "id": "release-raw-version",
        "summary": "Get the release raw_version field",
        "description": "The raw_version field is returned only when explicitly requested with $select.",
        "method": "GET",
        "endpoint": "/v7/release(<ID>)",
        "filters": "?\\$select=raw_version"
      },
      {
        "id": "release-from-fleet-and-raw-version",
        "summary": "Get a release ID given a specific fleet and version",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$filter=belongs_to__application%20eq%20<FLEET ID>%20and%20raw_version%20eq%20'<RAW VERSION>'&\\$select=id"
      },
      {
        "id": "release-from-fleet-and-commit",
        "summary": "Get a release ID given a specific fleet and commit",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$filter=belongs_to__application%20eq%20<FLEET ID>%20and%20commit%20eq%20'<COMMIT HASH>'&\\$select=id"
      }
    ]
  },
  {
    "id": "release_tag",
    "name": "Release tag",
    "fields": [
      "id",
      "release",
      "tag_key",
      "value"
    ],
    "examples": [
      {
        "id": "get-release-tags",
        "summary": "Get all tags by release commit",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/release_tag",
        "filters": "?\\$filter=release/commit%20eq%20'<COMMIT>'"
      },
      {
        "id": "create-release-tag",
        "summary": "Create a new release tag",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/release_tag",
        "filters": "",
        "data": "{\n    \"release\": \"<RELEASE ID>\",\n    \"tag_key\": \"<KEY>\",\n    \"value\": \"<VALUE>\"\n}"
      }
    ]
  },
 {
    "id": "supervisor_release",
    "name": "List Supervisor releases",
    "fields": [
      "id",
      "raw_version"
    ],
    "examples": [
      {
        "id": "get-supervisor-releases-by-cpu-architecture-slug",
        "summary": "Get all supervisor releases for a specific cpu architecture by slug (eg amd64/rpi/armv7hf/aarch64)",
        "description": "To request a list of the supported supervisor releases for a particular cpu architecture, the `CPU_ARCHITECTURE_SLUG` parameter is required. Even though this query only selects the `id` and `raw_version` fields, you can additionally specify any of the fields found in the release resource. The Authorization header is optional.",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$select=id,raw_version&\\$filter=(status%20eq%20%27success%27)%20and%20(is_final%20eq%20true)%20and%20(is_invalidated%20eq%20false)%20and%20(semver_major%20gt%200)%20and%20(belongs_to__application/any(a:(startswith(a/slug,%27balena_os%2F%27)%20and%20endswith(a/slug,%27-supervisor%27))%20and%20((a/is_public%20eq%20true)%20and%20(a/is_host%20eq%20false)%20and%20(a/is_for__device_type/any(dt:dt/is_of__cpu_architecture/any(c:c/slug%20eq%20%27<CPU_ARCHITECTURE_SLUG>%27))))))&\\$orderby=semver_major%20desc,semver_minor%20desc,semver_patch%20desc,revision%20desc"
      },
      {
        "id": "get-supervisor-releases-by-cpu-architecture-id",
        "summary": "Get all supervisor releases for a specific cpu architecture by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$select=id,raw_version&\\$filter=(status%20eq%20%27success%27)%20and%20(is_final%20eq%20true)%20and%20(is_invalidated%20eq%20false)%20and%20(semver_major%20gt%200)%20and%20(belongs_to__application/any(a:(startswith(a/slug,%27balena_os%2F%27)%20and%20endswith(a/slug,%27-supervisor%27))%20and%20((a/is_public%20eq%20true)%20and%20(a/is_host%20eq%20false)%20and%20(a/is_for__device_type/any(dt:dt/is_of__cpu_architecture%20eq%20<CPU_ARCHITECTURE_ID>)))))&\\$orderby=semver_major%20desc,semver_minor%20desc,semver_patch%20desc,revision%20desc"
      },
      {
        "id": "get-supervisor-releases-by-cpu-architecture-slug-and-version",
        "summary": "Get a specific supervisor release version for a specific cpu architecture",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$select=id,raw_version&\\$filter=(status%20eq%20%27success%27)%20and%20(is_final%20eq%20true)%20and%20(is_invalidated%20eq%20false)%20and%20(semver_major%20gt%200)%20and%20(belongs_to__application/any(a:(startswith(a/slug,%27balena_os%2F%27)%20and%20endswith(a/slug,%27-supervisor%27))%20and%20((a/is_public%20eq%20true)%20and%20(a/is_host%20eq%20false)%20and%20(a/is_for__device_type/any(dt:dt/is_of__cpu_architecture/any(c:c/slug%20eq%20%27<CPU_ARCHITECTURE_SLUG>%27))))))%20and%20(raw_version%20eq%20%27<VERSION>%27)&\\$orderby=semver_major%20desc,semver_minor%20desc,semver_patch%20desc,revision%20desc"
      }
    ]
  },
  {
    "id": "balenaos_versions",
    "name": "List balenaOS releases",
    "fields": [],
    "examples": [
      {
        "id": "list-balenaos-versions-for-device-type",
        "summary": "List the supported balenaOS versions for a device type",
        "description": "To request a list of the supported balenaOS versions for a particular device type, the `DEVICE TYPE SLUG` parameter is required. Even though this query only selects the `raw_version` field, you can additionally specify any of the fields found in the release resource. The Authorization header is optional.",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$select=raw_version&\\$filter=(is_final%20eq%20true)%20and%20(is_invalidated%20eq%20false)%20and%20(status%20eq%20'success')%20and%20(semver_major%20gt%200)%20and%20(belongs_to__application/any(bta:(bta/is_host%20eq%20true)%20and%20(bta/is_for__device_type/any(dt:dt/slug%20eq%20'<DEVICE TYPE SLUG>'))))&\\$orderby=semver_major%20desc,semver_minor%20desc,semver_patch%20desc,revision%20desc"
      },
      {
        "id": "list-balenaos-versions-for-private-device-type",
        "summary": "List the supported balenaOS versions for a private device type",
        "description": "Same as above, but in order to access private device types, you must provide an authentication token.",
        "method": "GET",
        "endpoint": "/v7/release",
        "filters": "?\\$select=raw_version&\\$filter=(is_final%20eq%20true)%20and%20(is_invalidated%20eq%20false)%20and%20(status%20eq%20'success')%20and%20(semver_major%20gt%200)%20and%20(belongs_to__application/any(bta:(bta/is_host%20eq%20true)%20and%20(bta/is_for__device_type/any(dt:dt/slug%20eq%20'<DEVICE TYPE SLUG>'))))&\\$orderby=semver_major%20desc,semver_minor%20desc,semver_patch%20desc,revision%20desc"
      }
    ]
  },
  {
    "id": "download",
    "name": "Download balenaOS",
    "fields": [],
    "examples": [
      {
        "id": "download-private-balenaos",
        "summary": "Download private or ESR balenaOS images",
        "description": "In order to download an ESR or private balenaOS image, you need to provide your bearer token. The `deviceType` and `version` parameters are required. Add an `--output` flag to provide a path for the image to be downloaded.",
        "method": "GET",
        "endpoint": "/download",
        "content-type": "application/octet-stream",
        "filters": "?deviceType=<DEVICE NAME>&version=<BALENAOS VERSION>&fileType=.zip'"
      },
      {
        "id": "download-balenaos",
        "summary": "Download public balenaOS images",
        "description": "Same as above but the auth header is optional to use. The `deviceType` and `version` parameters are required. These releases also available for download on balena.io/os and the dashboard.",
        "method": "GET",
        "endpoint": "/download",
        "content-type": "application/octet-stream",
        "filters": "?deviceType=<DEVICE NAME>&version=<BALENAOS VERSION>&fileType=.gz'"
      }
    ]
  },
  {
    "id": "user__has__public_key",
    "name": "SSH key",
    "fields": [
      "id",
      "user",
      "title",
      "public_key",
      "created_at"
    ],
    "examples": [
      {
        "id": "get-ssh-keys",
        "summary": "Get all SSH keys",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/user__has__public_key",
        "filters": ""
      },
      {
        "id": "ssh-keys-by-id",
        "summary": "Get SSH key by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/user__has__public_key(<ID>)",
        "filters": ""
      },
      {
        "id": "new-ssh-key",
        "summary": "Add new SSH key to account",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/user__has__public_key",
        "filters": "",
        "data": "{\n    \"public_key\": \"<SSH KEY>\",\n    \"title\": \"<TITLE>\",\n    \"user\": \"<USER ID>\"\n}"
      },
      {
        "id": "remove-ssh-key",
        "summary": "Remove SSH key",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/user__has__public_key(<ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "service",
    "name": "Service",
    "fields": [
      "id",
      "created_at",
      "application",
      "service_name"
    ],
    "examples": [
      {
        "id": "services-of-fleet",
        "summary": "Get all services belonging to a fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/service",
        "filters": "?\\$filter=application/app_name%20eq%20'<FLEET NAME>'"
      }
    ]
  },
  {
    "id": "service_install",
    "name": "Service install",
    "fields": [
      "id",
      "created_at",
      "device",
      "installs__service"
    ],
    "examples": [
      {
        "id": "service-name-by-device",
        "summary": "Get service name for all services on a device",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/service_install",
        "filters": "?\\$filter=device/uuid%20eq%20'<DEVICE UUID>'&\\$expand=installs__service(\\$select=service_name)"
      }
    ]
  },
  {
    "id": "user",
    "name": "User",
    "fields": [
      "id",
      "actor",
      "username",
      "created_at"
    ],
    "examples": [
      {
        "id": "get-users",
        "summary": "Get users associated with account",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/user",
        "filters": ""
      },
      {
        "id": "get-users-fleet",
        "summary": "Get users associated with fleet",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/user__is_member_of__application",
        "filters": "?\\$expand=user(\\$select=id,username,actor),application_membership_role(\\$select=id,name,actor)&\\$filter=is_member_of__application%20eq%20<ID>"
      },
      {
        "id": "create-fleet-membership",
        "summary": "Create fleet membership",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/user__is_member_of__application",
        "filters": "",
        "data": "{\n    \"is_member_of_application\": <ID>,\n    \"username\": \"<USERNAME>\",\n    \"application_membership_role\": <ROLE ID>\n}"
      },
      {
        "id": "delete-fleet-membership",
        "summary": "Delete fleet membership",
        "description": "",
        "method": "DELETE",
        "endpoint": "/v7/user__is_member_of__application(is_member_of__application=<ID>,user=<USER ID>)",
        "filters": ""
      }
    ]
  },
  {
    "id": "team",
    "name": "Team",
    "fields": [
      "id",
      "created_at",
      "name",
      "description",
      "belongs_to__organization"
    ],
    "examples": [
      {
        "id": "get-teams",
        "summary": "Get all teams associated with user",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/team",
        "filters": ""
      },
      {
        "id": "get-team-by-id",
        "summary": "Get team by ID",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/team(<ID>)",
        "filters": ""
      },
      {
        "id": "delete-team",
        "summary": "Delete team with ID",
        "description": "",
        "method": "Delete",
        "endpoint": "/v7/team(<ID>)",
        "filters": ""
      },
      {
        "id": "create-team",
        "summary": "Create a new team in organization",
        "description": "",
        "method": "POST",
        "endpoint": "/v7/team",
        "filters": "",
        "data": "{\n    \"name\": \"<TEAM NAME>\",\n    \"belongs_to__organization\": \"<ORG ID>\"\n}"
      }
    ]
  },
  {
    "id": "team_fleet_access",
    "name": "Team Fleet Access",
    "fields": [
      "id",
      "created_at",
      "team",
      "grants_access_to__application",
      "application_membership_role"
    ],
    "examples": [
      {
        "id": "get-team-fleet-access",
        "summary": "Get Team's fleet access",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/team_application_access",
        "filters": ""
      }
    ]
  },
  {
    "id": "team_membership",
    "name": "Team Membership",
    "fields": [
      "id",
      "created_at",
      "user",
      "is_member_of__team"
    ],
    "examples": [
      {
        "id": "get-team-membership",
        "summary": "Get team membership of users",
        "description": "",
        "method": "GET",
        "endpoint": "/v7/team_membership",
        "filters": ""
      }
    ]
  },
  {
    "id": "whoami",
    "name": "Who am I",
    "fields": [
      "id",
      "username",
      "email"
    ],
    "examples": [
      {
        "id": "whoami",
        "summary": "Get user associated with token",
        "description": "",
        "method": "GET",
        "endpoint": "/user/v1/whoami",
        "filters": ""
      }
    ]
  }
]
